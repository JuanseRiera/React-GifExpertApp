{"version":3,"sources":["AddCategory.js","GifGridItem.js","helpers/getGifs.js","GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","categories","toUpperCase","type","id","autoComplete","placeholder","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","busqueda","a","fetch","respuesta","json","data","console","log","gifs","map","gif","images","downsized_medium","GifGrid","category","loading","state","setstate","useEffect","then","useFetchGifs","img","GifExpertApp","body","document","querySelector","ReactDOM","render"],"mappings":"6LAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAiBhD,OACE,mCACE,sBAAMC,SAZO,SAACC,GAChBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GACb,MAAM,CAAEP,EAAWQ,eAAnB,mBAAqCD,OAEvCN,EAAc,MAMd,SACE,uBACEQ,KAAK,OACLC,GAAG,MACHC,aAAa,MACbC,YAAY,gBACZC,MAAOb,EACPc,SAvBa,SAACX,GACpBF,EAAcE,EAAEY,OAAOF,MAAML,uB,QCLpBQ,EAAc,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACnC,OACE,mCACE,sBAAKC,UAAU,6CAAf,UACE,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,U,uBCPCK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACJ,uCACF,mCACD,KACVN,EAJiB,UACJ,uCADI,oBAEN,mCAFM,kBAGP,KAHO,cAIuCK,GAJvC,SAKCE,MAAMP,GALP,cAKjBQ,EALiB,gBAMAA,EAAUC,OANV,uBAMfC,EANe,EAMfA,KACNC,QAAQC,IAAIF,GACNG,EAAOH,EAAKI,KAAI,SAACC,GACrB,MAAO,CACLvB,GAAE,OAAEuB,QAAF,IAAEA,OAAF,EAAEA,EAAKvB,GACTO,MAAK,OAAEgB,QAAF,IAAEA,OAAF,EAAEA,EAAKhB,MACZC,IAAG,OAAEe,QAAF,IAAEA,OAAF,EAAEA,EAAKC,OAAOC,iBAAiBjB,QAZjB,kBAeda,GAfc,4CAAH,sDCKPK,EAAU,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EACdtC,mBAAS,CAAE6B,KAAM,GAAIU,SAAS,IADhB,mBACjCC,EADiC,KAC1BC,EAD0B,KAYxC,OATAC,qBAAU,WACRnB,EAAQe,GAAUK,MAAK,SAAChB,GACtBc,EAAS,CACPZ,KAAMF,EACNY,SAAS,SAGZ,CAACD,IAEGE,EDTiBI,CAAaN,GAA/BT,EADiC,EACjCA,KAAMU,EAD2B,EAC3BA,QAsBZ,OACE,qCACE,oBAAInB,UAAU,qDAAd,SACGkB,IAEFC,GACC,mBAAGnB,UAAU,mDAAb,0BAzBCmB,GAAWV,GAAQA,EAAKtB,OAAS,EAElC,qBAAKa,UAAU,gBAAf,gBACGS,QADH,IACGA,OADH,EACGA,EAAMI,KAAI,SAACY,GACV,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIlC,SAKhC4B,GAAaV,GAAwB,IAAhBA,EAAKtB,YAA/B,EAEI,mCACE,mBAAGa,UAAU,uDAAb,2EEIK0B,EArBM,WAAO,IAAD,EACW9C,mBAAS,CAAC,aADrB,mBAClBQ,EADkB,KACNT,EADM,KAGzB,OACE,qCACE,sBAAKqB,UAAU,SAAf,UACE,8CACA,8BACE,cAAC,EAAD,CAAarB,cAAeA,SAIhC,uBAECS,EAAWyB,KAAI,SAACK,GACf,OAAO,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,UCfvBS,G,MAAOC,SAASC,cAAc,UAEpCC,IAASC,OAAO,cAAC,EAAD,IAAkBJ,K","file":"static/js/main.a35a709f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({ setcategories }) => {\n  const [inputValue, setinputValue] = useState(\"\");\n\n  const manageChange = (e) => {\n    setinputValue(e.target.value.toUpperCase());\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setcategories((categories) => {\n        return [inputValue.toUpperCase(), ...categories];\n      });\n      setinputValue(\"\");\n    }\n  };\n\n  return (\n    <>\n      <form onSubmit={onSubmit}>\n        <input\n          type=\"text\"\n          id=\"add\"\n          autoComplete=\"off\"\n          placeholder=\"Buscar GIF...\"\n          value={inputValue}\n          onChange={manageChange}\n        />\n      </form>\n    </>\n  );\n};\n\nAddCategory.propTypes = {\n  setcategories: PropTypes.func.isRequired,\n};\n","import React from \"react\";\n\nexport const GifGridItem = ({ title, url }) => {\n  return (\n    <>\n      <div className=\"card animate__animated animate__fadeInLeft\">\n        <img src={url} alt={title} />\n        <p>{title}</p>\n      </div>\n    </>\n  );\n};\n","export const getGifs = async (busqueda) => {\n  const endPoint = \"https://api.giphy.com/v1/gifs/search\";\n  const apiKey = \"DET1T7j31AYCMsDjXqrlghFX400Ee2OA\";\n  const limit = \"10\";\n  let url = `${endPoint}?api_key=${apiKey}&limit=${limit}&q=${busqueda}`;\n  let respuesta = await fetch(url);\n  let { data } = await respuesta.json();\n  console.log(data);\n  const gifs = data.map((gif) => {\n    return {\n      id: gif?.id,\n      title: gif?.title,\n      url: gif?.images.downsized_medium.url,\n    };\n  });\n  return gifs;\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { GifGridItem } from \"./GifGridItem\";\nimport { useFetchGifs } from \"./hooks/useFetchGifs\";\n\nexport const GifGrid = ({ category }) => {\n  let { data, loading } = useFetchGifs(category);\n\n  const htmlToRender = () => {\n    if (!loading && data && data.length > 0) {\n      return (\n        <div className=\"cardContainer\">\n          {data?.map((img) => {\n            return <GifGridItem key={img.id} {...img} />;\n          })}\n        </div>\n      );\n    }\n    if (!loading && (!data || data.length === 0)) {\n      return (\n        <>\n          <p className=\"nombreCategoria animate__animated animate__headShake\">\n            No se encontraron elementos para la busqueda realizada.\n          </p>\n        </>\n      );\n    }\n  };\n  return (\n    <>\n      <h3 className=\"nombreCategoria animate__animated animate__flipInY\">\n        {category}\n      </h3>\n      {loading && (\n        <p className=\"nombreCategoria animate__animated animate__flash\">\n          Cargando...\n        </p>\n      )}\n      {htmlToRender()}\n    </>\n  );\n};\n\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired,\n};\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setstate] = useState({ data: [], loading: true });\n\n  useEffect(() => {\n    getGifs(category).then((respuesta) => {\n      setstate({\n        data: respuesta,\n        loading: false,\n      });\n    });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\nimport { AddCategory } from \"./AddCategory\";\nimport { GifGrid } from \"./GifGrid\";\n\nconst GifExpertApp = () => {\n  const [categories, setcategories] = useState([\"SHERLOCK\"]);\n\n  return (\n    <>\n      <div className=\"header\">\n        <h2>GifExpertApp</h2>\n        <div>\n          <AddCategory setcategories={setcategories} />\n        </div>\n      </div>\n\n      <hr />\n\n      {categories.map((category) => {\n        return <GifGrid key={category} category={category} />;\n      })}\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"./index.css\";\nconst body = document.querySelector(\"#root\");\n\nReactDOM.render(<GifExpertApp />, body);\n"],"sourceRoot":""}